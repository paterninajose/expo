{"version":3,"file":"UpdatesProvider.js","sourceRoot":"","sources":["../src/UpdatesProvider.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEnE,OAAO,KAAK,OAAO,MAAM,WAAW,CAAC;AAErC,OAAO,EAAE,eAAe,EAAE,MAAM,gBAAgB,CAAC;AACjD,OAAO,EAAE,gCAAgC,EAAE,gBAAgB,EAAE,MAAM,6BAA6B,CAAC;AASjG,mCAAmC;AAEnC,mCAAmC;AACnC,MAAM,KAAK,GAAG,CAAC,OAAe,EAAE,EAAE;IAChC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC7B,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,0DAA0D;AAC1D,MAAM,2BAA2B,GAAG,CAAC,QAAuC,EAAE,EAAE;IAC9E,OAAO,QAAQ;QACb,CAAC,CAAC;YACE,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI;YAC5C,SAAS,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI;YACrE,QAAQ;SACT;QACH,CAAC,CAAC,SAAS,CAAC;AAChB,CAAC,CAAC;AAEF,2CAA2C;AAC3C,MAAM,gBAAgB,GAAG,CAAC,KAAkB,EAAe,EAAE;IAC3D,MAAM,sBAAsB,GAAG,IAAI,IAAI,EAAE,CAAC;IAC1C,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,CAAC,eAAe,CAAC,mBAAmB,EAAE;QAC9D,OAAO;YACL,gBAAgB;YAChB,sBAAsB;SACvB,CAAC;KACH;SAAM,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,CAAC,eAAe,CAAC,gBAAgB,EAAE;QAClE,OAAO;YACL,gBAAgB;YAChB,eAAe,EAAE,2BAA2B,CAAC,KAAK,CAAC,QAAQ,CAAC;YAC5D,sBAAsB;SACvB,CAAC;KACH;SAAM;QACL,uBAAuB;QACvB,OAAO;YACL,gBAAgB;YAChB,KAAK,EAAE,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;YAC/B,sBAAsB;SACvB,CAAC;KACH;AACH,CAAC,CAAC;AAEF,mCAAmC;AACnC,MAAM,4BAA4B,GAA+B,KAAK,IAAI,EAAE;IAC1E,IAAI,MAAmB,CAAC;IACxB,IAAI;QACF,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,mBAAmB,EAAE,CAAC;QACxD,MAAM,sBAAsB,GAAG,IAAI,IAAI,EAAE,CAAC;QAC1C,IAAI,WAAW,CAAC,WAAW,EAAE;YAC3B,MAAM,GAAG;gBACP,gBAAgB;gBAChB,eAAe,EAAE,2BAA2B,CAAC,WAAW,CAAC,QAAQ,CAAC;gBAClE,sBAAsB;aACvB,CAAC;SACH;aAAM;YACL,MAAM,GAAG;gBACP,gBAAgB;gBAChB,sBAAsB;aACvB,CAAC;SACH;KACF;IAAC,OAAO,KAAU,EAAE;QACnB,MAAM,sBAAsB,GAAG,IAAI,IAAI,EAAE,CAAC;QAC1C,MAAM,GAAG;YACP,gBAAgB;YAChB,KAAK,EAAE,KAAK,EAAE,OAAO,IAAI,gBAAgB;YACzC,sBAAsB;SACvB,CAAC;KACH;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,kCAAkC;AAClC,MAAM,cAAc,GAAsC,aAAa,CAAC;IACtE,WAAW,EAAE;QACX,gBAAgB;KACjB;IACD,cAAc,EAAE,CAAC,CAAC,EAAE,EAAE,GAAE,CAAC;CAC1B,CAAC,CAAC;AAEH,8CAA8C;AAE9C;;;;;GAKG;AACH,MAAM,2BAA2B,GAE7B,CAAC,QAAQ,EAAE,EAAE;IACf,MAAM,MAAM,GAA2B,EAAE,CAAC;IAC1C,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE;QACpD,IAAI,GAAG,KAAK,KAAK,EAAE;YACjB,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;SACvD;KACF;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,oBAAoB,GAAwB,KAAK,IAAI,EAAE;IAC3D,MAAM,OAAO,CAAC,gBAAgB,EAAE,CAAC;IACjC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC;IAClB,MAAM,OAAO,CAAC,WAAW,EAAE,CAAC;AAC9B,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,cAAc,GAA8E,CAChG,eAAe,EACf,EAAE;IACF,eAAe;QACb,eAAe,CAAC;YACd,IAAI,EAAE,gCAAgC,CAAC,cAAc;SACtD,CAAC,CAAC;IACL,OAAO,CAAC,gBAAgB,EAAE;SACvB,IAAI,CAAC,GAAG,EAAE;QACT,eAAe;YACb,eAAe,CAAC;gBACd,IAAI,EAAE,gCAAgC,CAAC,iBAAiB;aACzD,CAAC,CAAC;IACP,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;QACtB,eAAe;YACb,eAAe,CAAC;gBACd,IAAI,EAAE,gCAAgC,CAAC,cAAc;gBACrD,KAAK;aACN,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,SAAS,GAAG,GAAG,EAAE;IACrB,OAAO,CAAC,WAAW,EAAE,CAAC;AACxB,CAAC,CAAC;AAEF,qCAAqC;AAErC;;;;GAIG;AACH,IAAI,cAAc,GAAG,GAAG,EAAE;IACxB,iEAAiE;AACnE,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,eAAe,GAAG,CAAC,KAAwB,EAAE,EAAE;IACnD,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,QAAQ,CAAC;QAC7C,gBAAgB;KACjB,CAAC,CAAC;IACH,4DAA4D;IAC5D,qEAAqE;IACrE,UAAU;IACV,eAAe,CAAC,CAAC,KAAK,EAAE,EAAE;QACxB,cAAc,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IACH,OAAO,CACL,oBAAC,cAAc,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,WAAW,EAAE,cAAc,EAAE,IAC5D,KAAK,CAAC,QAAQ,CACS,CAC3B,CAAC;AACJ,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AACH,MAAM,UAAU,GAAG,GAOjB,EAAE;IACF,kDAAkD;IAClD,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,cAAc,CAAC,CAAC;IAEnE,gDAAgD;IAChD,cAAc,GAAG,GAAG,EAAE;QACpB,4BAA4B,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1E,CAAC,CAAC;IACF,wDAAwD;IACxD,OAAO;QACL,WAAW;QACX,cAAc;QACd,2BAA2B;QAC3B,oBAAoB;QACpB,cAAc;QACd,SAAS;KACV,CAAC;AACJ,CAAC,CAAC;AAUF,mBAAmB;AACnB,OAAO,EAAE,gCAAgC,EAAE,MAAM,6BAA6B,CAAC;AAE/E,iBAAiB;AACjB,OAAO,EACL,eAAe,EACf,UAAU,EACV,cAAc,EACd,2BAA2B,EAC3B,oBAAoB,EACpB,cAAc,EACd,SAAS,GACV,CAAC","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nimport * as Updates from './Updates';\nimport type { Manifest, UpdateEvent } from './Updates.types';\nimport { useUpdateEvents } from './UpdatesHooks';\nimport { UpdatesProviderDownloadEventType, currentlyRunning } from './UpdatesProvider.constants';\nimport type { UpdatesInfo, UpdatesProviderDownloadEvent } from './UpdatesProvider.types';\n\n// Context that includes getter and setter for the updates info\nexport type UpdatesContextType = {\n  updatesInfo: UpdatesInfo;\n  setUpdatesInfo: (updates: UpdatesInfo) => void;\n};\n\n/////// Internal functions ////////\n\n// Promise wrapper for setTimeout()\nconst delay = (timeout: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout);\n  });\n};\n\n// Constructs the availableUpdate from the update manifest\nconst availableUpdateFromManifest = (manifest: Partial<Manifest> | undefined) => {\n  return manifest\n    ? {\n        updateId: manifest?.id ? manifest?.id : null,\n        createdAt: manifest?.createdAt ? new Date(manifest?.createdAt) : null,\n        manifest,\n      }\n    : undefined;\n};\n\n// Constructs the UpdatesInfo from an event\nconst updatesFromEvent = (event: UpdateEvent): UpdatesInfo => {\n  const lastCheckForUpdateTime = new Date();\n  if (event.type === Updates.UpdateEventType.NO_UPDATE_AVAILABLE) {\n    return {\n      currentlyRunning,\n      lastCheckForUpdateTime,\n    };\n  } else if (event.type === Updates.UpdateEventType.UPDATE_AVAILABLE) {\n    return {\n      currentlyRunning,\n      availableUpdate: availableUpdateFromManifest(event.manifest),\n      lastCheckForUpdateTime,\n    };\n  } else {\n    // event type === ERROR\n    return {\n      currentlyRunning,\n      error: new Error(event.message),\n      lastCheckForUpdateTime,\n    };\n  }\n};\n\n// Implementation of checkForUpdate\nconst checkAndReturnNewUpdatesInfo: () => Promise<UpdatesInfo> = async () => {\n  let result: UpdatesInfo;\n  try {\n    const checkResult = await Updates.checkForUpdateAsync();\n    const lastCheckForUpdateTime = new Date();\n    if (checkResult.isAvailable) {\n      result = {\n        currentlyRunning,\n        availableUpdate: availableUpdateFromManifest(checkResult.manifest),\n        lastCheckForUpdateTime,\n      };\n    } else {\n      result = {\n        currentlyRunning,\n        lastCheckForUpdateTime,\n      };\n    }\n  } catch (error: any) {\n    const lastCheckForUpdateTime = new Date();\n    result = {\n      currentlyRunning,\n      error: error?.message || 'Error occurred',\n      lastCheckForUpdateTime,\n    };\n  }\n  return result;\n};\n\n// The context provided to the app\nconst UpdatesContext: React.Context<UpdatesContextType> = createContext({\n  updatesInfo: {\n    currentlyRunning,\n  },\n  setUpdatesInfo: (_) => {},\n});\n\n///////////// Exported functions /////////////\n\n/**\n * Extracts any custom properties in the `extra` part of the Expo config.  The `eas` property\n * is excluded (reserved for Expo internal use).\n * @param manifest The manifest to check\n * @returns Object containing any properties found. If no extra properties found, returns an empty object.\n */\nconst extraPropertiesFromManifest: (manifest: Partial<Manifest>) => {\n  [key: string]: any;\n} = (manifest) => {\n  const result: { [key: string]: any } = {};\n  for (const key in manifest?.extra?.expoClient?.extra) {\n    if (key !== 'eas') {\n      result[key] = manifest?.extra?.expoClient?.extra[key];\n    }\n  }\n  return result;\n};\n\n/**\n * Downloads and runs an update, if one is available. Provided to application code\n * from the [`useUpdates`](#useupdates) hook.\n */\nconst downloadAndRunUpdate: () => Promise<void> = async () => {\n  await Updates.fetchUpdateAsync();\n  await delay(2000);\n  await Updates.reloadAsync();\n};\n\n/**\n * Downloads an update, if one is available, using `Updates.fetchUpdateAsync()`.\n * @param downloadHandler Optional handler. If present, the handler will be called when download starts, and again when download completes (successfully or not).\n */\nconst downloadUpdate: (downloadHandler?: (event: UpdatesProviderDownloadEvent) => void) => void = (\n  downloadHandler\n) => {\n  downloadHandler &&\n    downloadHandler({\n      type: UpdatesProviderDownloadEventType.DOWNLOAD_START,\n    });\n  Updates.fetchUpdateAsync()\n    .then(() => {\n      downloadHandler &&\n        downloadHandler({\n          type: UpdatesProviderDownloadEventType.DOWNLOAD_COMPLETE,\n        });\n    })\n    .catch((error: Error) => {\n      downloadHandler &&\n        downloadHandler({\n          type: UpdatesProviderDownloadEventType.DOWNLOAD_ERROR,\n          error,\n        });\n    });\n};\n\n/**\n * Runs an update by calling `Updates.reloadAsync()`. This should not be called unless there is an available update\n * that has already been successfully downloaded using [`downloadUpdate()`](#downloadupdate).\n */\nconst runUpdate = () => {\n  Updates.reloadAsync();\n};\n\n/////// Provider and hook ///////////\n\n/**\n * Calls `Updates.checkForUpdateAsync()` and uses the passed in setter\n * to refresh the [`UpdatesInfo`](#updatesinfo). Provided to application code from\n * the [`useUpdates`](#useupdates) hook.\n */\nlet checkForUpdate = () => {\n  // This stub is replaced with the real implementation in the hook\n};\n\n/**\n * Provides the Updates React context. Includes an [`UpdateEvent`](#updateevent) listener\n * that will set the context automatically, if automatic updates are enabled and a new\n * update is available. This is required if application code uses the [`useUpdates`](#useupdates) hook.\n * @param props Context will be provided to `props.children`\n * @returns the provider.\n * @example\n * ```jsx App.tsx\n * import { UpdatesProvider } from 'expo-updates-provider';\n *\n * import UpdatesDemo from './src/UpdatesDemo';\n *\n * export default function App() {\n *   return (\n *     <UpdatesProvider>\n *       <UpdatesDemo />\n *     </UpdatesProvider>\n *   );\n * }\n * ```\n */\nconst UpdatesProvider = (props: { children: any }) => {\n  const [updatesInfo, setUpdatesInfo] = useState({\n    currentlyRunning,\n  });\n  // Set up listener for events from automatic update requests\n  // that happen on startup, and use events to refresh the updates info\n  // context\n  useUpdateEvents((event) => {\n    setUpdatesInfo(updatesFromEvent(event));\n  });\n  return (\n    <UpdatesContext.Provider value={{ updatesInfo, setUpdatesInfo }}>\n      {props.children}\n    </UpdatesContext.Provider>\n  );\n};\n\n/**\n * Hook that obtains the Updates info structure and functions.\n * Requires that application code be inside an [`UpdatesProvider`](#updatesprovider).\n * @returns the [`UpdatesInfo`](#updatesinfo) structure and associated methods. When using the provider, only these methods should be used.\n * @example\n * ```jsx UpdatesDemo.tsx\n * import { StatusBar } from 'expo-status-bar';\n * import React from 'react';\n * import { Pressable, Text, View } from 'react-native';\n * import { useUpdates } from 'expo-updates-provider';\n *\n * export default function UpdatesDemo() {\n *   const { updatesInfo, checkForUpdate, downloadAndRunUpdate } = useUpdates();\n *\n *   const { currentlyRunning, updateAvailable } = updatesInfo;\n *\n *   // If true, we show the button to download and run the update\n *   const showDownloadButton = updateAvailable !== undefined;\n *\n *   // Show whether or not we are running embedded code or an update\n *   const runTypeMessage = updatesInfo.currentlyRunning.isEmbeddedLaunch\n *     ? 'This app is running from built-in code'\n *     : 'This app is running an update';\n *\n *   return (\n *     <View style={styles.container}>\n *       <Text style={styles.headerText}>Updates Demo</Text>\n *       <Text>{runTypeMessage}</Text>\n *       <Button pressHandler={checkForUpdate} text=\"Check manually for updates\" />\n *       {showDownloadButton ? (\n *         <Button pressHandler={downloadAndRunUpdate} text=\"Download and run update\" />\n *       ) : null}\n *       <StatusBar style=\"auto\" />\n *     </View>\n *   );\n * }\n */\nconst useUpdates = (): {\n  updatesInfo: UpdatesInfo;\n  checkForUpdate: typeof checkForUpdate;\n  extraPropertiesFromManifest: typeof extraPropertiesFromManifest;\n  downloadAndRunUpdate: typeof downloadAndRunUpdate;\n  downloadUpdate: typeof downloadUpdate;\n  runUpdate: typeof runUpdate;\n} => {\n  // Get updates info value and setter from provider\n  const { updatesInfo, setUpdatesInfo } = useContext(UpdatesContext);\n\n  // Create the implementation of checkForUpdate()\n  checkForUpdate = () => {\n    checkAndReturnNewUpdatesInfo().then((result) => setUpdatesInfo(result));\n  };\n  // Return the updates info and the user facing functions\n  return {\n    updatesInfo,\n    checkForUpdate,\n    extraPropertiesFromManifest,\n    downloadAndRunUpdate,\n    downloadUpdate,\n    runUpdate,\n  };\n};\n\n// Export types\nexport type {\n  UpdatesInfo,\n  CurrentlyRunningInfo,\n  AvailableUpdateInfo,\n  UpdatesProviderDownloadEvent,\n} from './UpdatesProvider.types';\n\n// Export constants\nexport { UpdatesProviderDownloadEventType } from './UpdatesProvider.constants';\n\n// Export methods\nexport {\n  UpdatesProvider,\n  useUpdates,\n  checkForUpdate,\n  extraPropertiesFromManifest,\n  downloadAndRunUpdate,\n  downloadUpdate,\n  runUpdate,\n};\n"]}